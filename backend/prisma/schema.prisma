generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  email            String            @unique
  phone            String
  password         String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  role             Role              @default(USER)
  avatar           String?
  emailVerified    Boolean           @default(false)
  concessionOrders ConcessionOrder[]
  reviews          Review[]
  tickets          Ticket[]
  resetToken          String?           
  resetTokenExpires   DateTime?         
  resetTokenCreatedAt DateTime?
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[] @relation("MovieGenres")
}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  releaseDate DateTime
  poster      String
  bannerImage String?
  duration    Int        @default(90)
  director    String     @default("")
  mainActors  String     @default("")
  trailerUrl  String?
  reviews     Review[]
  showtimes   Showtime[]
  genres      Genre[]    @relation("MovieGenres")
}

model Cinema {
  id      Int     @id @default(autoincrement())
  name    String
  address String
  image   String?
  mapUrl  String?
  halls   Hall[]
}

model Hall {
  id         Int        @id @default(autoincrement())
  name       String
  totalSeats Int
  rows       Int
  columns    Int
  cinemaId   Int
  cinema     Cinema     @relation(fields: [cinemaId], references: [id])
  showtimes  Showtime[]
}

model Showtime {
  id        Int      @id @default(autoincrement())
  movieId   Int
  startTime DateTime
  endTime   DateTime
  hallId    Int
  price     Float?
  seats     Seat[]
  hall      Hall     @relation(fields: [hallId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  tickets   Ticket[]
}

model Seat {
  id         Int        @id @default(autoincrement())
  showtimeId Int
  row        String
  column     String
  status     SeatStatus
  type       SeatType   @default(STANDARD)
  showtime   Showtime   @relation(fields: [showtimeId], references: [id])
  tickets    Ticket[]
}

model Ticket {
  id               Int               @id @default(autoincrement())
  userId           Int
  showtimeId       Int
  seatId           Int
  price            Float
  status           String
  promotionId      Int?
  paymentId        Int?
  concessionOrders ConcessionOrder[]
  payment          Payment?          @relation(fields: [paymentId], references: [id])
  promotion        Promotion?        @relation(fields: [promotionId], references: [id])
  seat             Seat              @relation(fields: [seatId], references: [id])
  showtime         Showtime          @relation(fields: [showtimeId], references: [id])
  user             User              @relation(fields: [userId], references: [id])
}

model Payment {
  id               Int               @id @default(autoincrement())
  amount           Float
  method           PaymentMethod
  status           PaymentStatus     @default(PENDING)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  paymentDate      DateTime?
  transactionId    String?
  appTransId       String?
  additionalData   String?
  concessionOrders ConcessionOrder[]
  tickets          Ticket[]

  @@map("payments")
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  movieId     Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  isAnonymous Boolean  @default(false)
  movie       Movie    @relation(fields: [movieId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Promotion {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  discount    Float
  validFrom   DateTime
  validUntil  DateTime
  description String?
  image       String?
  isActive    Boolean   @default(true)
  title       String
  type        PromoType @default(PERCENTAGE)
  Ticket      Ticket[]
}

model ConcessionCategory {
  id          Int              @id @default(autoincrement())
  name        String           @unique
  description String?
  image       String?
  isActive    Boolean          @default(true)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @default(now()) @updatedAt
  items       ConcessionItem[]
}

model ConcessionItem {
  id          Int                   @id @default(autoincrement())
  name        String
  description String?
  price       Float
  image       String?
  isAvailable Boolean               @default(true)
  categoryId  Int
  size        String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now()) @updatedAt
  comboItems  ConcessionComboItem[]
  category    ConcessionCategory    @relation(fields: [categoryId], references: [id])
  orderItems  ConcessionOrderItem[]
}

model ConcessionCombo {
  id              Int                   @id @default(autoincrement())
  name            String
  description     String?
  price           Float
  image           String?
  isAvailable     Boolean               @default(true)
  discountPercent Float                 @default(0)
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @default(now()) @updatedAt
  items           ConcessionComboItem[]
  orderItems      ConcessionOrderItem[]
}

model ConcessionComboItem {
  id       Int             @id @default(autoincrement())
  comboId  Int
  itemId   Int
  quantity Int             @default(1)
  combo    ConcessionCombo @relation(fields: [comboId], references: [id], onDelete: Cascade)
  item     ConcessionItem  @relation(fields: [itemId], references: [id])
}

model ConcessionOrder {
  id          Int                   @id @default(autoincrement())
  userId      Int
  status      OrderStatus           @default(PENDING)
  orderType   OrderType             @default(STANDALONE) // Thêm trường này
  totalAmount Float
  paymentId   Int?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @default(now()) @updatedAt
  payment     Payment?              @relation(fields: [paymentId], references: [id])
  user        User                  @relation(fields: [userId], references: [id])
  items       ConcessionOrderItem[]
  tickets     Ticket[]              
}


model ConcessionOrderItem {
  id       Int              @id @default(autoincrement())
  orderId  Int
  itemId   Int?
  comboId  Int?
  quantity Int
  price    Float
  notes    String?
  combo    ConcessionCombo? @relation(fields: [comboId], references: [id])
  item     ConcessionItem?  @relation(fields: [itemId], references: [id])
  order    ConcessionOrder  @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderType {
  STANDALONE    // Đơn độc lập
  WITH_TICKET   // Đơn kèm vé
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  E_WALLET
  CASH
  ZALOPAY
  VNPAY
  MOMO
}

enum OrderStatus {
  PENDING
  PAID
  PREPARING
  READY
  COMPLETED
  CANCELLED
}

enum Role {
  ADMIN
  USER
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  LOCKED
}

enum SeatType {
  STANDARD
  VIP
  COUPLE
}

enum PromoType {
  PERCENTAGE
  FIXED
}
