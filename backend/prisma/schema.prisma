generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  phone     String
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)
  avatar    String?
  emailVerified  Boolean       @default(false)
  reviews   Review[]
  tickets   Ticket[]
}

model Genre {
  id     Int     @id @default(autoincrement())
  name   String  @unique
  movies Movie[] @relation("MovieGenres")
}

model Movie {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  releaseDate DateTime
  poster      String
  duration    Int        @default(90)
  director    String     @default("")
  mainActors  String     @default("")
  trailerUrl  String?
  reviews     Review[]
  showtimes   Showtime[]
  genres      Genre[]    @relation("MovieGenres")
}

model Cinema {
  id      Int     @id @default(autoincrement())
  name    String
  address String
  image   String?
  mapUrl  String?
  halls   Hall[]
}

model Hall {
  id         Int        @id @default(autoincrement())
  name       String
  totalSeats Int
  rows       Int
  columns    Int
  cinemaId   Int
  cinema     Cinema     @relation(fields: [cinemaId], references: [id])
  showtimes  Showtime[]
}

model Showtime {
  id        Int      @id @default(autoincrement())
  movieId   Int
  startTime DateTime
  endTime   DateTime
  hallId    Int
  seats     Seat[]
  price     Float?
  hall      Hall     @relation(fields: [hallId], references: [id])
  movie     Movie    @relation(fields: [movieId], references: [id])
  tickets   Ticket[]
}

model Seat {
  id         Int        @id @default(autoincrement())
  showtimeId Int
  row        String
  column     String
  status     SeatStatus
  type       SeatType   @default(STANDARD)
  showtime   Showtime   @relation(fields: [showtimeId], references: [id])
  tickets    Ticket[]
}

model Ticket {
  id          Int        @id @default(autoincrement())
  userId      Int
  showtimeId  Int
  seatId      Int
  price       Float
  status      String
  promotionId Int?
  paymentId   Int?
  payment     Payment?   @relation(fields: [paymentId], references: [id])
  promotion   Promotion? @relation(fields: [promotionId], references: [id])
  seat        Seat       @relation(fields: [seatId], references: [id])
  showtime    Showtime   @relation(fields: [showtimeId], references: [id])
  user        User       @relation(fields: [userId], references: [id])
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELLED
  FAILED
}

enum PaymentMethod {
  CREDIT_CARD
  BANK_TRANSFER
  E_WALLET
  CASH
  ZALOPAY
  VNPAY
  MOMO
}


model Payment {
  id           Int           @id @default(autoincrement())
  tickets      Ticket[]     
  amount       Float
  method       PaymentMethod
  status       PaymentStatus @default(PENDING)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  paymentDate  DateTime?
  transactionId String?

  // Dữ liệu cho VNPay
  appTransId    String?       // Mã đơn hàng gửi đến VNPay (vnp_TxnRef)
  additionalData String?      // Dữ liệu bổ sung dạng JSON

  @@map("payments")
}

model Review {
  id          Int      @id @default(autoincrement())
  userId      Int
  movieId     Int
  rating      Int
  comment     String?
  createdAt   DateTime @default(now())
  isAnonymous Boolean  @default(false)
  movie       Movie    @relation(fields: [movieId], references: [id])
  user        User     @relation(fields: [userId], references: [id])
}

model Promotion {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  discount    Float
  validFrom   DateTime
  validUntil  DateTime
  description String?
  image       String?
  isActive    Boolean   @default(true)
  title       String
  type        PromoType @default(PERCENTAGE)
  Ticket      Ticket[]
}

enum Role {
  ADMIN
  USER
}

enum SeatStatus {
  AVAILABLE
  BOOKED
  LOCKED
}

enum SeatType {
  STANDARD
  VIP
  COUPLE
}

enum PromoType {
  PERCENTAGE
  FIXED
}
